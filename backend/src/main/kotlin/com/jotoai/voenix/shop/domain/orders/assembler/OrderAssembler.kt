package com.jotoai.voenix.shop.domain.orders.assembler

import com.jotoai.voenix.shop.domain.articles.assembler.ArticleAssembler
import com.jotoai.voenix.shop.domain.articles.assembler.MugArticleVariantAssembler
import com.jotoai.voenix.shop.domain.orders.dto.AddressDto
import com.jotoai.voenix.shop.domain.orders.dto.OrderDto
import com.jotoai.voenix.shop.domain.orders.dto.OrderItemDto
import com.jotoai.voenix.shop.domain.orders.entity.Order
import com.jotoai.voenix.shop.domain.orders.entity.OrderItem
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component

@Component
class OrderAssembler(
    @param:Value("\${app.base-url:http://localhost:8080}") private val appBaseUrl: String,
    private val articleAssembler: ArticleAssembler,
    private val mugArticleVariantAssembler: MugArticleVariantAssembler,
) {
    fun toDto(entity: Order): OrderDto =
        OrderDto(
            id = requireNotNull(entity.id) { "Order ID cannot be null when converting to DTO" },
            orderNumber = requireNotNull(entity.orderNumber) { "Order number should be generated by database" },
            customerEmail = entity.customerEmail,
            customerFirstName = entity.customerFirstName,
            customerLastName = entity.customerLastName,
            customerPhone = entity.customerPhone,
            shippingAddress = AddressDto.fromEntity(entity.shippingAddress),
            billingAddress = entity.billingAddress?.let { AddressDto.fromEntity(it) },
            subtotal = entity.subtotal,
            taxAmount = entity.taxAmount,
            shippingAmount = entity.shippingAmount,
            totalAmount = entity.totalAmount,
            status = entity.status,
            cartId = entity.cart.id!!,
            notes = entity.notes,
            items = entity.items.map { toItemDto(it) },
            pdfUrl = generatePdfUrl(entity.id),
            createdAt = requireNotNull(entity.createdAt) { "Order createdAt cannot be null when converting to DTO" },
            updatedAt = requireNotNull(entity.updatedAt) { "Order updatedAt cannot be null when converting to DTO" },
        )

    fun toItemDto(entity: OrderItem): OrderItemDto =
        OrderItemDto(
            id = requireNotNull(entity.id) { "OrderItem ID cannot be null when converting to DTO" },
            article = articleAssembler.toDto(entity.article),
            variant = mugArticleVariantAssembler.toDto(entity.variant),
            quantity = entity.quantity,
            pricePerItem = entity.pricePerItem,
            totalPrice = entity.totalPrice,
            generatedImageId = entity.generatedImageId,
            generatedImageFilename = entity.generatedImageFilename,
            promptId = entity.prompt?.id,
            customData = entity.customData,
            createdAt = requireNotNull(entity.createdAt) { "OrderItem createdAt cannot be null when converting to DTO" },
        )

    private fun generatePdfUrl(orderId: java.util.UUID): String = "$appBaseUrl/api/user/orders/$orderId/pdf"
}
