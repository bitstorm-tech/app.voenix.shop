<root>
    <instructions>
        Implement the following requirements. Use the requirements-engineer, code-quality-reviewer, backend-expert and frontend-expert agents.

        Here is the order of execution:
        1. The requirements-engineer is reading the requirements and thinking hard about any edge cases or other related stuff that is missing in the requirements.
        2. The requirements-engineer creates a comprehensive plan.
        3. Backend-expert and frontend-expert are working on the plan in parallel. They talk to each other if they need stuff from each other.
        4. After both, backend-expert AND frontend-expert are finished with their tasks, the code-quality-reviewer kicks in and reviews the work created by the frontend-expert and backend-experts and looks for improvements.
    </instructions>
    <requirements>
        <title>Update mug variants</title>
        <description>We have to add new fields to the mug variants</description>

        <requirement-list>
            <requirements-backend>
                <agent>backend-expert</agent>
                <requirement id="b1">
                    <description>New fields</description>
                    <fields>
                        <field>
                            <name>example_image_filename</name>
                            <type>string</type>
                            <constraints>not null</constraints>
                        </field>
                        <field>
                            <name>supplier_article_number</name>
                            <type>string</type>
                            <constraints>optional</constraints>
                        </field>
                        <field>
                            <name>is_default</name>
                            <type>boolean</type>
                            <constraints>not null, default false</constraints>
                        </field>
                    </fields>
                </requirement>
                <requirement id="b2">
                    <description>
                        For the example_image_filename, the backend must expose an admin API endpoint that gets an image and an optional crop area. To store the image, the usual flow (UUID filename, optional cropping, converting to WebP format, etc.) is applied to the image. The final images are stored {storage.root}/public/images/articles/mugs/variant-example-images/.
                    </description>
                </requirement>
            </requirements-backend>
            <requirements-frontend>
                <agent>frontend-expert</agent>
                <requirement id="f1">
                    <description>
                        Add a UI element to handle supplier_article_number to the component @frontend/src/pages/admin/articles/tabs/MugVariantsTab.tsx
                    </description>
                </requirement>
                <requirement id="f2">
                    <description>
                        Add a UI element to handle is_default to the component @frontend/src/pages/admin/articles/tabs/MugVariantsTab.tsx
                    </description>
                </requirement>
                <requirement id="f3">
                    <description>
                        Add a UI element to handle example_image_filename to the @frontend/src/pages/admin/articles/tabs/MugVariantsTab.tsx component. To achieve this requirement, the user must be able to select an image and create a crop area. To store the image, the image itself and the crop area must be sent to the backend. A new admin API endpoint is implemented in the backend for this.
                    </description>
                </requirement>
            </requirements-frontend>
        </requirement-list>
    </requirements>
</root>