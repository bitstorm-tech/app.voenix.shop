<?xml version="1.0" encoding="UTF-8"?>
<requirements>
    <title>Product Requirements Document: Article Management System Refactoring</title>
    <executive-summary>Transform the current Mug-specific admin page into a generic Article management system that can handle multiple product types (mugs, shirts, pillows, etc.) while maintaining the variant system for product variations like colors.</executive-summary>
    
    <current-state>
        <generic-features>
            <feature>Basic information: name, descriptions (short/long), image, price</feature>
            <feature>Status: active/inactive</feature>
            <feature>Timestamps: created_at, updated_at</feature>
            <feature>Variant system (colors with example images)</feature>
            <feature>CRUD operations</feature>
            <feature>Search and filtering capabilities</feature>
        </generic-features>
        
        <mug-specific-features>
            <feature>Physical dimensions: height, diameter (in mm)</feature>
            <feature>Print template specifications: width, height (in mm)</feature>
            <feature>Filling quantity (e.g., "250ml")</feature>
            <feature>Dishwasher safe flag</feature>
        </mug-specific-features>
        
        <missing-features>
            <feature>Category assignment (categories exist but aren't linked to products)</feature>
            <feature>Article type discrimination</feature>
            <feature>Type-specific attribute storage</feature>
        </missing-features>
    </current-state>
    
    <proposed-model>
        <article-structure>
            <common-attributes>
                <attribute>id, name, description_short, description_long</attribute>
                <attribute>main_image, price, active</attribute>
                <attribute>category_id (NOT NULL - mandatory)</attribute>
                <attribute>subcategory_id (NULL - optional)</attribute>
                <attribute>article_type (enum: MUG, SHIRT, PILLOW, etc.)</attribute>
                <attribute>created_at, updated_at</attribute>
                <attribute>variants[] (one-to-many relationship)</attribute>
            </common-attributes>
            
            <type-specific-tables>
                <table name="article_mug_details">
                    <field>article_id (FK)</field>
                    <field>height_mm, diameter_mm</field>
                    <field>print_template_width_mm, print_template_height_mm</field>
                    <field>filling_quantity, dishwasher_safe</field>
                    <field>created_at, updated_at</field>
                </table>
                
                <table name="article_shirt_details">
                    <field>article_id (FK)</field>
                    <field>material, care_instructions</field>
                    <field>fit_type (enum: REGULAR, SLIM, LOOSE)</field>
                    <field>available_sizes (array: S, M, L, XL, XXL)</field>
                    <field>created_at, updated_at</field>
                </table>
                
                <table name="article_pillow_details">
                    <field>article_id (FK)</field>
                    <field>width_cm, height_cm, depth_cm</field>
                    <field>material, filling_type</field>
                    <field>cover_removable, washable</field>
                    <field>created_at, updated_at</field>
                </table>
            </type-specific-tables>
        </article-structure>
    </proposed-model>
    
    <requirement-list>
        <data-model-requirements>
            <requirement id="R1" title="Article Base Entity">
                <description>Must support common attributes shared by all product types</description>
                <description>Must include article_type field to discriminate between different products</description>
                <description>Category assignment is MANDATORY - every article must belong to a category</description>
                <description>Subcategory assignment is OPTIONAL</description>
                <description>Must maintain backward compatibility with existing mug data</description>
            </requirement>
            
            <requirement id="R2" title="Type-Specific Attributes">
                <description>Use separate tables for each article type (e.g., article_mug_details, article_shirt_details)</description>
                <description>One-to-one relationship between article and its type-specific details</description>
                <description>Foreign key constraint ensures data integrity</description>
                <description>Allows for proper indexing and query optimization</description>
                <description>Type-specific validation at database level</description>
            </requirement>
            
            <requirement id="R3" title="Variant System">
                <description>All variants of an article share the same price (inherited from parent article)</description>
                <variant-types>
                    <type article="Mugs">Color variants only (current system maintained)</type>
                    <type article="Shirts">Color + Size combinations (stored as separate variant records)</type>
                    <type article="Pillows">Color + Material combinations</type>
                </variant-types>
                <variant-structure>
                    <field>id</field>
                    <field>article_id (FK)</field>
                    <field>variant_type (COLOR, SIZE, MATERIAL)</field>
                    <field>variant_value (e.g., "Red", "XL", "Cotton")</field>
                    <field>sku (unique identifier for inventory)</field>
                    <field>example_image_filename</field>
                    <field>created_at, updated_at</field>
                </variant-structure>
            </requirement>
        </data-model-requirements>
        
        <frontend-requirements>
            <requirement id="R4" title="Article List Page">
                <description>Display all articles regardless of type</description>
                <description>Show article type as a column/badge</description>
                <description>Filter by article type</description>
                <description>Filter by category (mandatory field)</description>
                <description>Filter by subcategory (when applicable)</description>
                <description>Type column shows user-friendly names (Mug, T-Shirt, Pillow)</description>
            </requirement>
            
            <requirement id="R5" title="Article Create/Edit Page">
                <description>Category selection is required (validation error if not selected)</description>
                <description>Subcategory selection appears after category is chosen (optional)</description>
                <description>Dynamic form based on selected article type</description>
                <common-tabs>
                    <tab>Description (includes category selection)</tab>
                    <tab>Costs (single price for all variants)</tab>
                    <tab>Supplier</tab>
                    <tab>Shipping</tab>
                </common-tabs>
                <type-specific-tabs>
                    <tab type="Mugs">Specifications tab with dimensions</tab>
                    <tab type="Shirts">Materials &amp; Sizes tab</tab>
                    <tab type="Pillows">Dimensions &amp; Materials tab</tab>
                </type-specific-tabs>
                <description>Variants tab shows appropriate options based on article type</description>
            </requirement>
            
            <requirement id="R6" title="Navigation &amp; Routing">
                <description>Change /admin/mugs/* to /admin/articles/*</description>
                <description>Add article type filter in URL: /admin/articles?type=mug</description>
                <description>Maintain deep links for editing: /admin/articles/{id}/edit</description>
            </requirement>
        </frontend-requirements>
        
        <backend-requirements>
            <requirement id="R7" title="API Structure">
                <base-endpoint>/api/admin/articles</base-endpoint>
                <endpoints>
                    <endpoint method="GET" path="/api/admin/articles">List all (with type, category filters)</endpoint>
                    <endpoint method="GET" path="/api/admin/articles/{id}">Get with type-specific details</endpoint>
                    <endpoint method="POST" path="/api/admin/articles">Create (type specified in body)</endpoint>
                    <endpoint method="PUT" path="/api/admin/articles/{id}">Update</endpoint>
                    <endpoint method="DELETE" path="/api/admin/articles/{id}">Delete (cascades to details table)</endpoint>
                </endpoints>
                <description>Category validation on create/update operations</description>
            </requirement>
            
            <requirement id="R8" title="Service Layer">
                <description>ArticleService as base service with type-specific strategies</description>
                <detail-services>
                    <service>MugDetailService</service>
                    <service>ShirtDetailService</service>
                    <service>PillowDetailService</service>
                </detail-services>
                <description>Transaction management for article + details operations</description>
                <description>Validation includes mandatory category check</description>
            </requirement>
            
            <requirement id="R9" title="Database Schema">
                <sql-schema>
                    Base article table with common fields
                    Type-specific detail tables (article_mug_details, article_shirt_details, article_pillow_details)
                    Foreign key relationships and cascade deletes
                    Proper indexes on article_type and category_id
                </sql-schema>
            </requirement>
        </backend-requirements>
    </requirement-list>
    
    <edge-cases>
        <case id="E1" title="Data Migration">
            <description>No production data to migrate (development/empty database)</description>
            <description>Only structural changes needed</description>
            <description>Existing seed data can be recreated after migration</description>
        </case>
        
        <case id="E2" title="Variant Complexity">
            <description>Uniform pricing: Price changes apply to all variants</description>
            <description>Shirt variants: Create separate variant record for each color/size combo</description>
            <description>Example: Red T-Shirt in sizes S,M,L = 3 variant records</description>
            <description>Stock management per variant (future consideration)</description>
        </case>
        
        <case id="E3" title="Search &amp; Filtering">
            <description>Global search across all article types</description>
            <description>Type-specific search fields joined from detail tables</description>
            <description>Category filter always available (since it's mandatory)</description>
            <description>Performance: Use proper indexes on article_type and category_id</description>
        </case>
        
        <case id="E4" title="Validation Rules">
            <description>Category is required for all articles</description>
            <type-specific-validation>
                <rule type="Mugs">dimensions required</rule>
                <rule type="Shirts">at least one size required</rule>
                <rule type="Pillows">dimensions required</rule>
            </type-specific-validation>
            <description>Variant validation based on article type</description>
        </case>
    </edge-cases>
    
    <migration-strategy>
        <phase number="1" title="Database Changes">
            <step>Drop existing mug-related tables (mugs, mug_variants)</step>
            <step>Create new article tables structure</step>
            <step>Update category tables if needed</step>
        </phase>
        
        <phase number="2" title="Backend Implementation">
            <step>Implement Article entity and type-specific detail entities</step>
            <step>Create ArticleService with type strategies</step>
            <step>Implement new /api/admin/articles endpoints</step>
            <step>Remove old mug-specific code</step>
        </phase>
        
        <phase number="3" title="Frontend Update">
            <step>Replace mug pages with article pages</step>
            <step>Update routes from /admin/mugs to /admin/articles</step>
            <step>Implement dynamic form based on article type</step>
            <step>Update navigation and menu items</step>
        </phase>
    </migration-strategy>
    
    <technical-decisions>
        <decision>Separate tables for type-specific attributes - Better performance and data integrity</decision>
        <decision>Uniform variant pricing - Simplifies pricing logic</decision>
        <decision>Mandatory categories - Every article must have a category</decision>
        <decision>No templates/presets - Reduces initial complexity</decision>
        <decision>No bulk import - Manual entry only for now</decision>
    </technical-decisions>
    
    <success-criteria>
        <criterion>All existing mug functionality preserved</criterion>
        <criterion>Ability to add new article types with minimal code changes</criterion>
        <criterion>Unified admin interface for all article types</criterion>
        <criterion>Proper category organization for all articles</criterion>
        <criterion>Clean separation between common and type-specific logic</criterion>
        <criterion>No performance degradation</criterion>
        <criterion>Maintain data integrity with proper constraints</criterion>
    </success-criteria>
</requirements>